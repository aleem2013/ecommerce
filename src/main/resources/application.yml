springdoc:
  api-docs:
    path: /v3/api-docs
    enabled: true
  swagger-ui:
    path: /swagger-ui/index.html  # Changed from /swagger-ui.html
    enabled: true
    config-url: /v3/api-docs/swagger-config # Changed from /api-docs/swagger-config  
    disable-swagger-default-url: true
    urls:
      - url: /v3/api-docs
        name: Default
    oauth:
      use-pkce-with-authorization-code-grant: true
      client-id: ${spring.security.oauth2.client.registration.keycloak.client-id}
      client-secret: ${spring.security.oauth2.client.registration.keycloak.client-secret}
    csrf:
      enabled: true
    oauth2-redirect-url: http://localhost:8080/swagger-ui/oauth2-redirect.html
  show-actuator: true
  packages-to-scan: com.ecommerce.demo.controller

spring:
  application:
    name: ecommerce-service
    
  security:
    oauth2:
      client:
        registration:
          keycloak:
            client-id: ecommerce-client
            client-secret: your-client-secret-here
            scope: openid,profile,email,roles
            authorization-grant-type: authorization_code
        provider:
          keycloak:
            issuer-uri: http://localhost:8080/auth/realms/ecommerce
            user-name-attribute: preferred_username
            authorization-uri: http://localhost:8080/auth/realms/ecommerce/protocol/openid-connect/auth
            token-uri: http://localhost:8080/auth/realms/ecommerce/protocol/openid-connect/token
            user-info-uri: http://localhost:8080/auth/realms/ecommerce/protocol/openid-connect/userinfo
            jwk-set-uri: http://localhost:8080/auth/realms/ecommerce/protocol/openid-connect/certs
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8080/auth/realms/ecommerce   #${JWT_ISSUER_URI}
          jwk-set-uri: ${spring.security.oauth2.resourceserver.jwt.issuer-uri}/protocol/openid-connect/certs #${JWT_JWK_SET_URI}
            
  zipkin:
    base-url: http://localhost:9411
    
  actuator:
    endpoints:
      web:
        exposure:
          include: health,metrics,prometheus
          
          
  datasource:
    url: jdbc:postgresql://localhost:5433/ecommerce
    username: postgres
    password: ecommerce-demo786

  flyway:
    enabled: true
    baseline-on-migrate: true
    # Add this to ensure Flyway waits for the database to be ready
    connect-retries: 10
    connect-retries-interval: 2

  jpa:
    hibernate:
      ddl-auto: update
  kafka:
    bootstrap-servers: localhost:29092
    consumer:
      group-id: ecommerce-group
      auto-offset-reset: earliest
  data:
    redis:
        host: localhost
        port: 6380
    mongodb:
      uri: mongodb://localhost:27018/eventstore
  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest

resilience4j:
  circuitbreaker:
    instances:
      orderService:
        slidingWindowSize: 100
        permittedNumberOfCallsInHalfOpenState: 10
        waitDurationInOpenState: 10000
        failureRateThreshold: 50
  retry:
    instances:
      orderService:
        maxRetryAttempts: 3
        waitDuration: 1000
        
server:
  tomcat:
    max-threads: 200
    min-spare-threads: 20
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/html,text/plain

app:
  jwt:
    secret: V5GtuC6M3M68QetvZGG+XOPj+pWfGL4ujOOGIZC4Ck9gBKJGv75+Mx7/rjJj+EYENF4QEPugKpnWeIA+CfEf4Q==  # replace with your secure secret
    expiration: 86400000  # 24 hours in milliseconds

  security:
    jwt:
      base64-secret: V5GtuC6M3M68QetvZGG+XOPj+pWfGL4ujOOGIZC4Ck9gBKJGv75+Mx7/rjJj+EYENF4QEPugKpnWeIA+CfEf4Q==
      token-validity-in-seconds: 86400
      token-validity-in-seconds-for-remember-me: 2592000

postgres:
  healthcheck:
    test: ["CMD-SHELL", "pg_isready -U postgres -d ecommerce"]
    interval: 10s
    timeout: 5s
    retries: 5
    start_period: 10s
